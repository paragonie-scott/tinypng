{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Modern TinyPNG API for PHP7 PHP client for the TinyPNG API, Read more at official TinyPNG documentation . $ composer require robopuff/tinypng Basic usage $tinyPng = new \\TinyPng\\TinyPng('your_api_key'); $tinyPng->fromFile('unoptimized_image.png')->toFile('optimized_image.png'); License This software is licensed under the BSD-3-Clause License. View the license .","title":"Home"},{"location":"#modern-tinypng-api-for-php7","text":"PHP client for the TinyPNG API, Read more at official TinyPNG documentation . $ composer require robopuff/tinypng","title":"Modern TinyPNG API for PHP7"},{"location":"#basic-usage","text":"$tinyPng = new \\TinyPng\\TinyPng('your_api_key'); $tinyPng->fromFile('unoptimized_image.png')->toFile('optimized_image.png');","title":"Basic usage"},{"location":"#license","text":"This software is licensed under the BSD-3-Clause License. View the license .","title":"License"},{"location":"usage/","text":"Usage Basic $tinyPng = new \\TinyPng\\TinyPng('api_key'); // Provide image path $source = $tinyPng->fromFile('path_to_a_file.jpg'); // Provide image content $source = $tinyPng->fromBuffer('file_content_as_string'); // Provide image via url $source $tinyPng->fromUrl('http://example.com/image.png'); $source->toFile('output.file.png'); Define client Currently this library supports only Guzzle client, but you can specify options and client itself. For more informations about Guzzle options, please read official Guzzle documentation // You can specify GuzzleHttp client manually (no options will be applied) // http://docs.guzzlephp.org/en/stable/request-options.html $client = new \\TinyPng\\Client\\GuzzleClient(['guzzle' => 'options'], null); // Client is a class that implements \\TinyPng\\Client\\ClientInterface $tinyPng = new \\TinyPng\\TinyPng('api_key', $client); Actions Resize image $tinyPng->fromFile('source.png') ->resize([ 'method' => 'fit', 'width' => 50, ]) ->toFile('output.png'); Preserve metadata $tinyPng->fromFile('source.png') ->preserve(['copyright', 'creation', 'location']) ->toFile('output.png'); Save to Amazon S3 $tinyPng->fromFile('source.png') ->saveToAmazonS3([ 'aws_access_key_id' => '', 'aws_secret_access_key' => '', 'region' => '', 'path' => 'bucket/path/filename' ]); Get optimised result $image = $tinyPng->fromFile('source.png')->getImage(); $stream = $image->getDataStream(); // \\Psr\\Http\\Message\\StreamInterface $metada = $image->getMetadata(); // \\TinyPng\\Image\\Metadata For more detailed explanation please refer to official documentation","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#basic","text":"$tinyPng = new \\TinyPng\\TinyPng('api_key'); // Provide image path $source = $tinyPng->fromFile('path_to_a_file.jpg'); // Provide image content $source = $tinyPng->fromBuffer('file_content_as_string'); // Provide image via url $source $tinyPng->fromUrl('http://example.com/image.png'); $source->toFile('output.file.png');","title":"Basic"},{"location":"usage/#define-client","text":"Currently this library supports only Guzzle client, but you can specify options and client itself. For more informations about Guzzle options, please read official Guzzle documentation // You can specify GuzzleHttp client manually (no options will be applied) // http://docs.guzzlephp.org/en/stable/request-options.html $client = new \\TinyPng\\Client\\GuzzleClient(['guzzle' => 'options'], null); // Client is a class that implements \\TinyPng\\Client\\ClientInterface $tinyPng = new \\TinyPng\\TinyPng('api_key', $client);","title":"Define client"},{"location":"usage/#actions","text":"","title":"Actions"},{"location":"usage/#resize-image","text":"$tinyPng->fromFile('source.png') ->resize([ 'method' => 'fit', 'width' => 50, ]) ->toFile('output.png');","title":"Resize image"},{"location":"usage/#preserve-metadata","text":"$tinyPng->fromFile('source.png') ->preserve(['copyright', 'creation', 'location']) ->toFile('output.png');","title":"Preserve metadata"},{"location":"usage/#save-to-amazon-s3","text":"$tinyPng->fromFile('source.png') ->saveToAmazonS3([ 'aws_access_key_id' => '', 'aws_secret_access_key' => '', 'region' => '', 'path' => 'bucket/path/filename' ]);","title":"Save to Amazon S3"},{"location":"usage/#get-optimised-result","text":"$image = $tinyPng->fromFile('source.png')->getImage(); $stream = $image->getDataStream(); // \\Psr\\Http\\Message\\StreamInterface $metada = $image->getMetadata(); // \\TinyPng\\Image\\Metadata For more detailed explanation please refer to official documentation","title":"Get optimised result"}]}